
apiVersion: v1
kind: Service   # 定义一个服务
metadata:
  namespace: middleware
  name: warm-up
  labels:
    app: warm-up
spec:
  ports:
    - port: 80   # port是service对外暴露的端口，targetPort是容器暴露的端口，如果不写 targetPort, 那么就默认和port 一样
      targetPort: 8080
      name: http
  selector:
    app: warm-up   # 这个service 把所有的 labels 为“app: name ” 的pod选中，抽象为一个service，统一对外提供服务
---
apiVersion: extensions/v1beta1
kind: Deployment         # 定义部署，多个 Deployment 可以组成一个 service
metadata:
  namespace: middleware
  name: warm-up
spec:
  replicas: 1     #副本数量
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: warm-up      #定义一个标签，可以被service 使用
        version: v1
    spec:
      containers:
        - name: warm-up
          env:
            - name: master-url
              value: 
            - name: k8s-token
              value: 
            - name: warm-up-single
              value: 'off'
            - name: warm-up-multi
              value: 'on'
            - name: JAVA_TOOL_OPTIONS
              value: '-Dreactor.netty.pool.leasingStrategy=lifo'
          image: hwhaocool/k8s-javaweb-warm-up:v1
          imagePullPolicy: Always    # Always：不管镜像是否存在都会进行一次拉取,适合我们标记为 latest的私有镜像
          ports:
            - containerPort: 8080
          #就绪检查
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/warmup/health/info
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          #健康检查
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 20
            periodSeconds: 2
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          #资源限制
          resources:
            limits:
              memory: 2Gi
            requests:
              memory: 500Mi
---


